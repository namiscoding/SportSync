@model object  // Không cần model cụ thể vì trang này dùng JavaScript
@{
    ViewData["Title"] = "Quên Mật Khẩu";
    Layout = "_AuthLayout"; // Sử dụng layout chung
}

<div class="auth-content">
    <h4 class="auth-title">Quên mật khẩu</h4>
    <p class="auth-subtitle">Vui lòng nhập số điện thoại đã đăng ký để nhận mã OTP và đặt lại mật khẩu.</p>

    <section id="forgotPasswordFlowSection">
        <div id="phoneNumberSection">
            <h5 class="step-title">Xác thực số điện thoại của bạn</h5>
            <hr />
            <div class="form-group mb-3">
                <label for="phoneNumberInput" class="form-label">Số điện thoại</label>
                <input id="phoneNumberInput" class="form-control" placeholder="Nhập số điện thoại" />
                <span id="phoneNumberError" class="text-danger d-block mt-1"></span>
            </div>
            <button type="button" id="sendOtpButton" class="btn btn-primary" disabled>Gửi Mã OTP</button>
            <div id="loader" class="spinner-border text-primary ms-2" role="status" style="display: none; width: 1.5rem; height: 1.5rem;">
                <span class="visually-hidden">Đang xử lý...</span>
            </div>
        </div>

        <div id="otpSection" style="display:none;">
            <h5 class="step-title">Nhập mã OTP đã gửi đến <strong id="phoneNumberDisplay"></strong></h5>
            <hr />
            <div class="form-group mb-3">
                <label for="otpInput" class="form-label">Mã OTP (6 chữ số)</label>
                <input id="otpInput" class="form-control" type="tel" maxlength="6" placeholder="Nhập mã OTP" />
                <span id="otpError" class="text-danger d-block mt-1"></span>
            </div>
            <button type="button" id="verifyOtpButton" class="btn btn-success">Xác Nhận OTP</button>
            <button type="button" id="cancelOtpButton" class="btn btn-outline-secondary ms-2">Thay đổi SĐT</button>
            <div id="otpLoader" class="spinner-border text-success ms-2" role="status" style="display: none; width: 1.5rem; height: 1.5rem;">
                <span class="visually-hidden">Đang xác thực...</span>
            </div>
        </div>
    </section>

    <div id="authStatus" class="alert mt-3" role="alert" style="display: none;"></div>
    <hr />
    <p class="text-center">
        Nhớ mật khẩu? <a asp-action="Login" asp-controller="Account" class="btn-link">Đăng nhập</a>.
    </p>
</div>

@section Scripts {
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>

    <script>
        // ==========================================================================================
        // == QUAN TRỌNG: Đảm bảo bạn đã sửa `storageBucket` thành `YOUR_PROJECT_ID.appspot.com` ==
        // ==========================================================================================
        const firebaseConfig = {
            apiKey: "AIzaSyAd6hCJJg56qOxgA5HiCYFU4gIHxL2AnCk",
            authDomain: "sportsync-8e9da.firebaseapp.com",
            projectId: "sportsync-8e9da",
            storageBucket: "sportsync-8e9da.appspot.com",
            messagingSenderId: "288059783978",
            appId: "1:288059783978:web:c035d57cb22ea32b81bc53"
        };
        // ==========================================================================================

        try { firebase.initializeApp(firebaseConfig); } catch (e) { console.error("Lỗi khởi tạo Firebase App:", e); }
        const auth = firebase.auth();

        // DOM Elements
        const phoneNumberInput = document.getElementById('phoneNumberInput');
        const sendOtpButton = document.getElementById('sendOtpButton');
        const loader = document.getElementById('loader');
        const authStatus = document.getElementById('authStatus');
        const phoneNumberError = document.getElementById('phoneNumberError');
        const phoneNumberSection = document.getElementById('phoneNumberSection');
        const otpSection = document.getElementById('otpSection');
        const phoneNumberDisplay = document.getElementById('phoneNumberDisplay');
        const otpInput = document.getElementById('otpInput');
        const verifyOtpButton = document.getElementById('verifyOtpButton');
        const cancelOtpButton = document.getElementById('cancelOtpButton');
        const otpLoader = document.getElementById('otpLoader');
        const otpError = document.getElementById('otpError');

        window.confirmationResult = null;
        window.recaptchaVerifier = null;
        let sdtDaXacThucQuaFirebase = null;

        // Helper functions
        function showStatus(message, type = 'info') {
            authStatus.textContent = message;
            authStatus.className = `alert alert-${type} mt-3`;
            authStatus.style.display = 'block';
        }
        function clearStatus() {
            authStatus.textContent = '';
            authStatus.style.display = 'none';
            phoneNumberError.textContent = '';
            otpError.textContent = '';
        }
        function formatPhoneNumberToE164(phoneNumber) {
            let cleaned = phoneNumber.replace(/\D/g, '');
            if (cleaned.startsWith("84")) {
                if (cleaned.length > 9 && cleaned.length < 12) { return "+" + cleaned; }
            } else if (cleaned.startsWith("0")) {
                if (cleaned.length === 10) { return "+84" + cleaned.substring(1); }
            } else if (cleaned.length === 9 && !phoneNumber.startsWith("+")) {
                return "+84" + cleaned;
            }
            if (phoneNumber.startsWith("+84") && phoneNumber.length > 10) {
                return phoneNumber;
            }
            return null;
        }

        function initializeRecaptcha() {
            clearStatus();
            sendOtpButton.disabled = true;
            console.log("ForgotPassword: Attempting to initialize reCAPTCHA verifier...");
            try {
                if (window.recaptchaVerifier) {
                    try { window.recaptchaVerifier.clear(); console.log("ForgotPassword: Previous reCAPTCHA verifier cleared."); }
                    catch (e) { console.warn("ForgotPassword: Could not clear previous reCAPTCHA verifier:", e); }
                    window.recaptchaVerifier = null;
                }
                window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(sendOtpButton, {
                    'size': 'invisible',
                    'callback': (response) => { console.log("ForgotPassword: Invisible reCAPTCHA solved (callback)."); },
                    'expired-callback': () => { showStatus('Phiên reCAPTCHA đã hết hạn.', 'warning'); initializeRecaptcha(); }
                });
                console.log("ForgotPassword: Invisible reCAPTCHA verifier initialized.");
                sendOtpButton.disabled = false;
            } catch (error) {
                console.error("ForgotPassword: Lỗi khởi tạo RecaptchaVerifier:", error);
                showStatus('Lỗi reCAPTCHA: ' + error.message, 'danger');
                sendOtpButton.disabled = true;
            }
        }
        function resetForNewOtpAttempt() {
            clearStatus();
            otpSection.style.display = 'none';
            phoneNumberSection.style.display = 'block';
            phoneNumberInput.value = '';
            otpInput.value = '';
            window.confirmationResult = null;
            sdtDaXacThucQuaFirebase = null;
            phoneNumberInput.focus();
            if (window.recaptchaVerifier) {
                try { window.recaptchaVerifier.clear(); } catch (e) { }
            } else {
                initializeRecaptcha();
            }
            sendOtpButton.disabled = false;
        }

        window.addEventListener('load', function() {
            if (!window.recaptchaVerifier) { initializeRecaptcha(); }
            auth.onAuthStateChanged(function(user) { /* ... (có thể bỏ qua nếu không cần thiết cho ForgotPassword) ... */ });
        });

        sendOtpButton.addEventListener('click', function () {
            clearStatus();
            const rawPhoneNumber = phoneNumberInput.value.trim();
            sdtDaXacThucQuaFirebase = formatPhoneNumberToE164(rawPhoneNumber);

            if (!sdtDaXacThucQuaFirebase) {
                phoneNumberError.textContent = 'SĐT không hợp lệ.';
                phoneNumberInput.focus();
                return;
            }
            if (!window.recaptchaVerifier) {
                showStatus('reCAPTCHA chưa sẵn sàng.', 'warning');
                initializeRecaptcha();
                return;
            }

            sendOtpButton.disabled = true;
            loader.style.display = 'inline-block';

            auth.signInWithPhoneNumber(sdtDaXacThucQuaFirebase, window.recaptchaVerifier)
                .then((confirmationResult) => {
                    console.log("ForgotPassword: OTP sent to", sdtDaXacThucQuaFirebase);
                    showStatus('Mã OTP đã gửi đến ' + sdtDaXacThucQuaFirebase, 'success');
                    window.confirmationResult = confirmationResult;
                    phoneNumberSection.style.display = 'none';
                    otpSection.style.display = 'block';
                    phoneNumberDisplay.textContent = sdtDaXacThucQuaFirebase;
                    otpInput.value = '';
                    otpInput.focus();
                })
                .catch((error) => {
                    console.error("ForgotPassword: Lỗi gửi OTP:", error);
                    showStatus('Lỗi gửi OTP: ' + error.message, 'danger');
                    resetForNewOtpAttempt();
                })
                .finally(() => { loader.style.display = 'none'; });
        });

        verifyOtpButton.addEventListener('click', function () {
            clearStatus();
            const code = otpInput.value.trim();
            if (!code || code.length !== 6) {
                otpError.textContent = 'OTP phải có 6 chữ số.';
                otpInput.focus();
                return;
            }
            if (!window.confirmationResult) {
                showStatus('Lỗi xác thực. Vui lòng thử lại SĐT.', 'danger');
                return;
            }

            verifyOtpButton.disabled = true;
            otpLoader.style.display = 'inline-block';

            window.confirmationResult.confirm(code)
                .then((result) => {
                    const user = result.user;
                    console.log("ForgotPassword: OTP verified for user:", user.uid, user.phoneNumber);
                    showStatus('Xác thực OTP thành công! Đang chuẩn bị trang đặt lại mật khẩu...', 'success');
                    return user.getIdToken(true);
                })
                .then(function(idToken) {
                    console.log("ForgotPassword: Firebase ID Token obtained.");
                    const verifiedPhoneNumberForRedirect = firebase.auth().currentUser.phoneNumber || sdtDaXacThucQuaFirebase;
                    window.location.href = `/Account/ResetPassword?phoneNumber=${encodeURIComponent(verifiedPhoneNumberForRedirect)}&token=${encodeURIComponent(idToken)}`;
                })
                .catch((error) => {
                    console.error("ForgotPassword: Lỗi xác thực OTP:", error);
                    showStatus('Lỗi OTP: ' + error.message, 'danger');
                })
                .finally(() => {
                    verifyOtpButton.disabled = false;
                    otpLoader.style.display = 'none';
                });
        });

        cancelOtpButton.addEventListener('click', function() {
            resetForNewOtpAttempt();
        });
    </script>
}