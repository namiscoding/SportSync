@model SportSync.Web.Models.ViewModels.CourtComplex.CourtComplexViewModel

@{
    ViewData["Title"] = "Thêm Khu Phức Hợp Sân Mới";
    // ==========================================================================================
    // == QUAN TRỌNG: THAY THẾ "YOUR_MAPBOX_ACCESS_TOKEN" BẰNG ACCESS TOKEN MAPBOX CỦA BẠN ==
    // == Bạn nên lưu trữ Access Token này trong appsettings.json và đọc ra ở đây,        ==
    // == hoặc truyền từ Controller qua ViewData để an toàn hơn trong môi trường production. ==
    // ==========================================================================================
    var mapboxAccessToken = "pk.eyJ1IjoiYW5ocHJvMTIzIiwiYSI6ImNtYjNrY2F2bDBuc2Uya3MzOHNiejI5emgifQ.-UDOpaQLTgv2G_BH7DyLeQ";
}

<h1>@ViewData["Title"]</h1>
<p class="text-muted">Điền thông tin chi tiết về khu phức hợp sân của bạn. Sử dụng bản đồ để chọn vị trí chính xác.</p>
<hr />
<div class="row">
    <div class="col-md-12">
        <form asp-action="Create" method="post" enctype="multipart/form-data" id="createComplexForm">
            <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>

            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label asp-for="Name" class="form-label fw-semibold"></label>
                        <input asp-for="Name" class="form-control" />
                        <span asp-validation-for="Name" class="text-danger"></span>
                    </div>

                    @* API Hành chính Việt Nam *@
                    <div class="mb-3">
                        <label for="citySelect" class="form-label fw-semibold">Tỉnh/Thành phố</label>
                        <select asp-for="City" id="citySelect" class="form-select">
                            <option value="">-- Chọn Tỉnh/Thành phố --</option>
                        </select>
                        <span asp-validation-for="City" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label for="districtSelect" class="form-label fw-semibold">Quận/Huyện</label>
                        <select asp-for="District" id="districtSelect" class="form-select" disabled>
                            <option value="">-- Chọn Quận/Huyện --</option>
                        </select>
                        <span asp-validation-for="District" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label for="wardSelect" class="form-label fw-semibold">Phường/Xã</label>
                        <select asp-for="Ward" id="wardSelect" class="form-select" disabled>
                            <option value="">-- Chọn Phường/Xã --</option>
                        </select>
                        <span asp-validation-for="Ward" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Address" class="form-label fw-semibold"></label>
                        <input asp-for="Address" class="form-control" placeholder="Ví dụ: Số 123, Đường ABC" />
                        <span asp-validation-for="Address" class="text-danger"></span>
                        <small class="form-text text-muted">Nhập số nhà và tên đường.</small>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Description" class="form-label fw-semibold"></label>
                        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>
                </div>

                <div class="col-md-6">
                    @* Mapbox Integration *@
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Chọn vị trí trên bản đồ</label>
                        @* Ô tìm kiếm của Mapbox Geocoder sẽ được thêm vào đây bằng JavaScript *@
                        <div id="mapbox-geocoder-container" class="mb-2"></div>
                        <div id="map-mapbox" style="height: 350px; width: 100%; border-radius: 0.375rem; border: 1px solid #ced4da;">
                            @if (string.IsNullOrEmpty(mapboxAccessToken) || mapboxAccessToken == "YOUR_MAPBOX_ACCESS_TOKEN")
                            {
                                <div class="alert alert-warning h-100 d-flex align-items-center justify-content-center">
                                    Vui lòng cung cấp Mapbox Access Token hợp lệ để hiển thị bản đồ.
                                </div>
                            }
                        </div>
                        <small class="form-text text-muted">Nhấp vào bản đồ để đặt marker hoặc tìm kiếm địa chỉ.</small>
                    </div>
                    <input type="hidden" asp-for="Latitude" id="latitudeInput" />
                    <input type="hidden" asp-for="Longitude" id="longitudeInput" />
                    <div class="mb-3">
                        <p class="small">Tọa độ: Vĩ độ <span id="latDisplay" class="fw-bold">N/A</span>, Kinh độ <span id="lngDisplay" class="fw-bold">N/A</span></p>
                    </div>
                </div>
            </div>

            <hr class="my-4">
            <h5 class="mb-3">Thông tin bổ sung</h5>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label asp-for="MainImageFile" class="form-label fw-semibold"></label>
                    <input asp-for="MainImageFile" type="file" class="form-control" />
                    <span asp-validation-for="MainImageFile" class="text-danger"></span>
                    @if (TempData["InfoMessage"] != null)
                    {
                        <small class="form-text text-muted">@TempData["InfoMessage"]</small>
                    }
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label asp-for="ContactPhoneNumber" class="form-label fw-semibold"></label>
                    <input asp-for="ContactPhoneNumber" class="form-control" />
                    <span asp-validation-for="ContactPhoneNumber" class="text-danger"></span>
                </div>
                <div class="col-md-4 mb-3">
                    <label asp-for="ContactEmail" class="form-label fw-semibold"></label>
                    <input asp-for="ContactEmail" type="email" class="form-control" />
                    <span asp-validation-for="ContactEmail" class="text-danger"></span>
                </div>
            </div>

            <div class="row">
                <div class="col-md-4 mb-3">
                    <label asp-for="DefaultOpeningTime" class="form-label fw-semibold"></label>
                    <input asp-for="DefaultOpeningTime" type="time" class="form-control" />
                    <span asp-validation-for="DefaultOpeningTime" class="text-danger"></span>
                </div>
                <div class="col-md-4 mb-3">
                    <label asp-for="DefaultClosingTime" class="form-label fw-semibold"></label>
                    <input asp-for="DefaultClosingTime" type="time" class="form-control" />
                    <span asp-validation-for="DefaultClosingTime" class="text-danger"></span>
                </div>
            </div>

            <div class="mb-3 mt-4">
                <button type="submit" class="btn btn-primary btn-lg px-5">Tạo Khu Phức Hợp</button>
                <a asp-action="MyComplexes" class="btn btn-outline-secondary btn-lg ms-2 px-4">Hủy</a>
            </div>
        </form>
    </div>
</div>

@section Styles {
    @* Thêm section Styles nếu layout của bạn có RenderSection("Styles", false) *@
    @if (!string.IsNullOrEmpty(mapboxAccessToken) && mapboxAccessToken != "YOUR_MAPBOX_ACCESS_TOKEN")
    {
        <link href="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.css" rel="stylesheet">
        <link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css" type="text/css">
    }
    <style>
        /* CSS cho div bản đồ Mapbox (có thể cần hoặc không) */
        #map-mapbox {
            /* Đã set height trong HTML, có thể thêm các style khác ở đây */
        }

        .mapboxgl-ctrl-geocoder { /* Style cho ô tìm kiếm của Mapbox */
            width: 100%;
            max-width: none; /* Ghi đè max-width mặc định nếu cần */
            font-size: 1rem;
            line-height: 1.5;
            margin-bottom: 0.5rem; /* Thêm chút khoảng cách */
        }

            .mapboxgl-ctrl-geocoder .mapboxgl-ctrl-geocoder--input {
                height: calc(1.5em + .75rem + 2px); /* Làm cho nó giống với input Bootstrap */
                padding: .375rem .75rem;
            }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // ... (JavaScript cho API Hành chính giữ nguyên như trước) ...
        document.addEventListener('DOMContentLoaded', function () {
            const citySelect = document.getElementById('citySelect');
            const districtSelect = document.getElementById('districtSelect');
            const wardSelect = document.getElementById('wardSelect');
            const apiBaseUrl = 'https://provinces.open-api.vn/api/';

            async function populateDropdown(url, selectElement, placeholderText, dataPath) {
                selectElement.innerHTML = `<option value="">-- ${placeholderText} --</option>`;
                selectElement.disabled = true;
                try {
                    const response = await fetch(url);
                    if (!response.ok) throw new Error(`API call failed: ${response.status} for ${url}`);
                    let data = await response.json();
                    const itemsToIterate = dataPath ? data[dataPath] : data;

                    if (!Array.isArray(itemsToIterate)) {
                        console.error(`Expected an array for ${placeholderText} at path '${dataPath}', but got:`, itemsToIterate);
                        throw new Error(`Dữ liệu trả về cho ${placeholderText} không phải là một mảng.`);
                    }

                    itemsToIterate.forEach(item => {
                        const option = document.createElement('option');
                        option.value = item.name_with_type || item.name;
                        option.textContent = item.name_with_type || item.name;
                        option.dataset.code = item.code;
                        selectElement.appendChild(option);
                    });
                    selectElement.disabled = false;
                } catch (error) {
                    console.error(`Error fetching ${placeholderText}:`, error);
                    selectElement.innerHTML = `<option value="">-- Lỗi tải dữ liệu --</option>`;
                    selectElement.disabled = true;
                }
            }
            populateDropdown(apiBaseUrl + 'p/', citySelect, 'Chọn Tỉnh/Thành phố', null);
            citySelect.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                const cityCode = selectedOption.dataset.code;
                districtSelect.innerHTML = '<option value="">-- Chọn Quận/Huyện --</option>'; districtSelect.disabled = true;
                wardSelect.innerHTML = '<option value="">-- Chọn Phường/Xã --</option>'; wardSelect.disabled = true;
                if (cityCode) { populateDropdown(apiBaseUrl + `p/${cityCode}?depth=2`, districtSelect, 'Chọn Quận/Huyện', 'districts'); }
            });
            districtSelect.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                const districtCode = selectedOption.dataset.code;
                wardSelect.innerHTML = '<option value="">-- Chọn Phường/Xã --</option>'; wardSelect.disabled = true;
                if (districtCode) { populateDropdown(apiBaseUrl + `d/${districtCode}?depth=2`, wardSelect, 'Chọn Phường/Xã', 'wards'); }
            });
        });
    </script>

    @* Script cho Mapbox API *@
    @if (!string.IsNullOrEmpty(mapboxAccessToken) && mapboxAccessToken != "YOUR_MAPBOX_ACCESS_TOKEN")
    {
        <script src="https://api.mapbox.com/mapbox-gl-js/v3.3.0/mapbox-gl.js"></script>
        <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
        <script>
            const mapboxToken = "@mapboxAccessToken"; // Lấy token từ biến C#
            let map;
            let marker;

            function initializeMapbox() {
                if (!mapboxToken || mapboxToken === "YOUR_MAPBOX_ACCESS_TOKEN") {
                    console.error("Mapbox Access Token is not configured.");
                    document.getElementById('map-mapbox').innerHTML = '<div class="alert alert-danger h-100 d-flex align-items-center justify-content-center">Mapbox Access Token không hợp lệ.</div>';
                    return;
                }

                mapboxgl.accessToken = mapboxToken;
                map = new mapboxgl.Map({
                    container: 'map-mapbox', // ID của div chứa bản đồ
                    style: 'mapbox://styles/mapbox/streets-v12', // Kiểu bản đồ, bạn có thể chọn kiểu khác
                    center: [105.804817, 21.028511], // Tọa độ Hà Nội [lng, lat] làm mặc định
                    zoom: 11
                });

                map.addControl(new mapboxgl.NavigationControl()); // Thêm control zoom, xoay

                // Tạo marker có thể kéo thả
                marker = new mapboxgl.Marker({
                    draggable: true,
                    color: "#d02922" // Màu đỏ cho marker
                })
                // .setLngLat([105.804817, 21.028511]) // Có thể đặt vị trí ban đầu
                .addTo(map);

                // Hàm cập nhật tọa độ vào input ẩn
                function updateCoordinates(lngLat) {
                    document.getElementById('longitudeInput').value = lngLat.lng.toFixed(6);
                    document.getElementById('latitudeInput').value = lngLat.lat.toFixed(6);
                    document.getElementById('lngDisplay').textContent = lngLat.lng.toFixed(6);
                    document.getElementById('latDisplay').textContent = lngLat.lat.toFixed(6);
                }

                // Sự kiện khi marker được kéo thả xong
                marker.on('dragend', () => {
                    const lngLat = marker.getLngLat();
                    updateCoordinates(lngLat);
                    // Bạn có thể thêm logic geocode ngược để lấy địa chỉ từ tọa độ nếu cần
                });

                // Sự kiện khi nhấp vào bản đồ
                map.on('click', (e) => {
                    marker.setLngLat(e.lngLat);
                    updateCoordinates(e.lngLat);
                });

                // Thêm Geocoder (ô tìm kiếm địa chỉ)
                const geocoder = new MapboxGeocoder({
                    accessToken: mapboxgl.accessToken,
                    mapboxgl: mapboxgl,
                    marker: false, // Không tự động thêm marker của Geocoder, chúng ta dùng marker riêng
                    placeholder: "Tìm kiếm địa điểm..."
                });

                document.getElementById('mapbox-geocoder-container').appendChild(geocoder.onAdd(map));

                // Sự kiện khi chọn một kết quả từ Geocoder
                geocoder.on('result', (e) => {
                    const coords = e.result.geometry.coordinates; // [lng, lat]
                    const lngLat = { lng: coords[0], lat: coords[1] };
                    marker.setLngLat(lngLat);
                    map.flyTo({ center: lngLat, zoom: 15 });
                    updateCoordinates(lngLat);
                });
                 // Gọi khi bản đồ sẵn sàng để đảm bảo marker được hiển thị nếu có vị trí ban đầu
                map.on('load', () => {
                    const initialLat = parseFloat(document.getElementById('latitudeInput').value);
                    const initialLng = parseFloat(document.getElementById('longitudeInput').value);
                    if (!isNaN(initialLat) && !isNaN(initialLng)) {
                        const initialPos = [initialLng, initialLat];
                        marker.setLngLat(initialPos);
                        map.setCenter(initialPos);
                    } else {
                         // Nếu không có tọa độ ban đầu, thử lấy vị trí hiện tại của người dùng (cần sự cho phép)
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(position => {
                                const userLngLat = [position.coords.longitude, position.coords.latitude];
                                map.setCenter(userLngLat);
                                // Không tự động đặt marker, để người dùng tự chọn
                            }, () => {
                                console.warn('Không thể lấy vị trí hiện tại của người dùng.');
                            });
                        }
                    }
                });


            } // Kết thúc hàm initializeMapbox

            // Chạy hàm khởi tạo bản đồ Mapbox
            // Đảm bảo nó được gọi sau khi các script Mapbox đã tải
            // Thư viện Mapbox thường tự xử lý việc này nếu bạn đặt script theo đúng thứ tự.
            // Hoặc bạn có thể dùng sự kiện onload của script Mapbox nếu cần.
            // Hiện tại, chỉ cần đặt nó trong DOMContentLoaded là đủ nếu script Mapbox được tải trước.
             document.addEventListener('DOMContentLoaded', initializeMapbox);


        </script>
    }
    else
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                 console.warn("Mapbox Access Token is not configured. Map functionality will be disabled.");
                 const mapDiv = document.getElementById('map-mapbox');
                 if (mapDiv && !mapDiv.querySelector('.alert')) {
                    // Thông báo đã được xử lý bằng HTML ở trên rồi
                 }
            });
        </script>
    }
}
